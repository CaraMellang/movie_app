{"version":3,"sources":["component/Movie.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","gg","index","slice","App","useState","loading","setLoading","movies","setMovies","response","a","axios","get","ss","data","console","log","useEffect","medium_cover_image","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAgCeA,EA7BD,SAAC,GAAiD,EAA/CC,GAAgD,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OACjD,OACE,sBAAKC,UAAU,QAAf,UACE,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,aAAf,UACE,oBAAIA,UAAU,cAAd,SAA6BJ,IAC7B,oBAAII,UAAU,aAAd,SAA4BL,IAC5B,oBAAIK,UAAU,eAAd,SACGD,EAAOI,KAAI,SAACC,EAAIC,GAAL,OACV,oBAAgBL,UAAU,eAA1B,SACGI,GADMC,QAKb,oBAAGL,UAAU,gBAAb,UAA8BH,EAAQS,MAAM,EAAE,KAA9C,gB,MC+BOC,MA3Cf,WACE,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAQ,uCAAG,4BAAAC,EAAA,sEACEC,IAAMC,IACrB,4DAFa,OACTC,EADS,OAIfL,EAAUK,EAAGC,KAAKA,KAAKP,QACvBQ,QAAQC,IAAIH,GACZP,GAAW,GANI,2CAAH,qDAYd,OAHAW,qBAAU,WACRR,MACC,IAED,yBAASb,UAAU,YAAnB,SACGS,EACC,8BACE,sBAAMT,UAAU,SAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGW,EAAOR,KAAI,SAACQ,GACX,OACE,cAAC,EAAD,CAEEjB,GAAIiB,EAAOjB,GACXC,KAAMgB,EAAOhB,KACbC,MAAOe,EAAOf,MACdC,QAASc,EAAOd,QAChBC,OAAQa,EAAOW,mBACfvB,OAAQY,EAAOZ,QANVY,EAAOjB,YCpBb6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ca7f6d28.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Movie = ({ id, year, title, summary, poster, genres }) => {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img src={poster} alt={title} title={title} />\r\n      <div className=\"movie_data\">\r\n        <h1 className=\"movie_title\">{title}</h1>\r\n        <h2 className=\"movie_year\">{year}</h2>\r\n        <ul className=\"movie_genres\">\r\n          {genres.map((gg, index) => (\r\n            <li key={index} className=\"genres_genre\">\r\n              {gg}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"movie_summary\">{summary.slice(0,140)}...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./component/Movie\";\nimport \"./App.css\";\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n\n  const response = async () => {\n    const ss = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    );\n    setMovies(ss.data.data.movies);\n    console.log(ss);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    response();\n  }, []);\n  return (\n    <section className=\"container\">\n      {loading ? (\n        <div>\n          <span className=\"loader\">Loading...</span>\n        </div>\n      ) : (\n        <div className=\"movies\">\n          {movies.map((movies) => {\n            return (\n              <Movie\n                key={movies.id}\n                id={movies.id}\n                year={movies.year}\n                title={movies.title}\n                summary={movies.summary}\n                poster={movies.medium_cover_image}\n                genres={movies.genres}\n              />\n            );\n          })}\n        </div>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}